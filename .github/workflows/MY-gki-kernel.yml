name: MY GKI Kernel Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

env:
  GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }} 

on:
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]
    
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      kernel_variant:
        required: true
        type: string
      ksu_fork:
        required: true
        type: string
      hook_method:
        required: true
        type: string   
      include_susfs:
        required: true
        type: boolean
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      linuxxpu_variant:
        required: true
        type: string
      linuxxpu_branch:
        required: true
        type: string
      linuxxpu_branch_other:
        required: false
        type: string
      revision:
        required: false
        type: string
      #C_VERSION:
        #required: true
        #type: string
      #C_LAST_COMMIT:
        #required: true
        #type: string
      #C_TAG_NAME:
        #required: true
        #type: string
      manager_supports:
        required: true
        type: string
        

jobs:
  build-kernel-kernelsu:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      #CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      #CCACHE_NOHASHDIR: "true"
      #CCACHE_HARDLINK: "true"
      kernel_variant: ${{ inputs.kernel_variant }}
      ksu_fork: ${{ inputs.ksu_fork }}
      hook_method: ${{ inputs.hook_method }}
      include_susfs: ${{ inputs.include_susfs }}
      #C_VERSION: ${{ inputs.C_VERSION }}
      #C_LAST_COMMIT: ${{ inputs.C_LAST_COMMIT }}
      #C_TAG_NAME: ${{ inputs.C_TAG_NAME }}
      ZRAM: true
      #permissive cause bootloop
      selinux_permissive: false
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
              
      #- name: Checkout Repository
        #uses: actions/checkout@v4.2.2
        #with:
          #fetch-depth: 0
      - name: download linuxxpu with patched dir
        uses: actions/download-artifact@v4.3.0
        with:
          name: linuxxpu
          path: .
          github-token: '${{ env.GH_TOKEN }}'

      - name: Implementing necessary changes to the source code 
        run: |
          bash ${GITHUB_WORKSPACE}/.github/scripts/calc_patch_tg.sh
        
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"  

      # Install ccache
      - name: Install ccache,pahole,aria2
        run: sudo apt update && sudo apt install -y ccache pahole aria2

      #- name: Set up ccache
        #run: |
          #mkdir -p ~/.cache/bazel # Ensure the directory exists
          #ccache --version
          #ccache --max-size=2G
          #ccache --set-config=compression=true
          #echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      
      #- name: Restore ccache from cache
        #uses: actions/cache@v4
        #with:
          #path: ~/.ccache
          #key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          #restore-keys: |
            #${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-
            
      - name: delete toolchain and clang-22 caches if older than a certain amount
        run: |
          repo="${{ github.repository_owner }}/${{ github.event.repository.name }}"
        
          #clang older than 10 days
          if [ $(echo $(( ($(date +%s) - $(date --date=$(gh cache list --repo $repo -k clang-22-${{ runner.os }}-v1 --json  'createdAt' | grep 'createdAt' | cut -d'"' -f4) +%s) )/(60*60*24) ))) -gt 9 ];then
            echo "remove clang-22-${{ runner.os }}-v1 from chache ..."
            gh cache delete clang-22-${{ runner.os }}-v1 --repo $repo
          fi
          #toolchain older than 30 days
          if [ $(echo $(( ($(date +%s) - $(date --date=$(gh cache list --repo $repo -k toolchain-${{ runner.os }}-v1 --json  'createdAt' | grep 'createdAt' | cut -d'"' -f4) +%s) )/(60*60*24) ))) -gt 29 ];then
            echo "remove toolchain-${{ runner.os }}-v1 from chache ..."
            gh cache delete toolchain-${{ runner.os }}-v1 --repo $repo
          fi
        
      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: Download toolchain (if cache not found)
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
      
      - name: Cache clang-22
        id: cache-clang-22
        uses: actions/cache@v4
        with:
          path: |
            clang-22
          key: clang-22-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: Download clang-22 (if cache not found)
        if: steps.cache-clang-22.outputs.cache-hit != 'true'
        run: |
          clang_latest_ulr=$(curl -s https://api.github.com/repos/ZyCromerZ/Clang/releases/latest | grep browser_download_url | cut -d '"' -f 4)
          [ -z $clang_latest_ulr ] && { echo 'The clang-22 download link could not be extracted!!!';false; } || echo -e "Download link for the latest build of clang-22:\n${clang_latest_ulr}"
          mkdir -p clang-22
          aria2c -x 16 -s 16 -o clang-22.tar.gz ${clang_latest_ulr}
          tar -xzf clang-22.tar.gz -C clang-22
          rm -rf clang-22.tar.gz
          
      - name: Set environment variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          
      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > $GITHUB_WORKSPACE/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/testkey_rsa2048.pem" >> $GITHUB_ENV
          else
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/.github/scripts/testkey_rsa2048.pem" >> $GITHUB_ENV
            #exit 1
          fi

      - name: Install Repo
        run: |
          # Install dependencies
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."

          # Define the branch names using the inputs values
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          #git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "gki-2.0"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/ahmad24shargh/kernel_patches.git
          cd kernel_patches
          cp -r AnyKernel3 ../
          cd ..


      - name: Check Disk Space Before Sync
        run: |
          echo "Disk space before kernel source sync:"
          df -h

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          #if [[ "${{ env.kernel_variant }}" != "common-android-mainline" ]];then
            $REPO init --no-tags --depth=1 --dissociate -u https://android.googlesource.com/kernel/manifest -m ${GITHUB_WORKSPACE}/.github/manifests/${{ env.kernel_variant }}.xml 
          #else
            #$REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          #fi

          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          #cat ${DEFAULT_MANIFEST_PATH}

          # Check if branch is deprecated
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          #if [[ "${{ env.kernel_variant }}" != "common-android-mainline" ]];then
            $REPO sync --no-tags --clone-bundle --current-branch --optimized-fetch --force-sync -j$(nproc --all)
          #else
            # Sync repo and apply patches
            #$REPO --version
            #$REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          #fi
      
      - name: defconfig customization and various changes
        run: |
          #mkdir -p $CONFIG/out
          #cp "$defconfig" $CONFIG/out/.config
          #mkdir -p $CONFIG/common/arch/arm64/configs
          for file in $(find $CONFIG/common/arch/arm64/configs -type f 2>/dev/null);do sed -E -i -e '/CONFIG_LOCALVERSION/d' -e '/_LTO/d' $file;done
          if [[ "${{ env.kernel_variant }}" == "common-android-mainline" ]];then
            #cp "$defconfig" $CONFIG/common/arch/arm64/configs/gki_defconfig
            defconfig="${GITHUB_WORKSPACE}/.defconfig"
          elif [[ "${{ env.kernel_variant }}" == "chickernel" ]];then
            #rm $CONFIG/common/arch/arm64/configs/gki_defconfig 
            #cp $CONFIG/common/arch/arm64/configs/chickernel_defconfig $CONFIG/common/arch/arm64/configs/gki_defconfig
            defconfig="$GITHUB_WORKSPACE/$CONFIG/common/arch/arm64/configs/chickernel_defconfig"
            rm -rf $CONFIG/common/KernelSU-Next
          elif [[ "${{ env.kernel_variant }}" == *"topnotchfreaks"* ]];then
            if [ -f $CONFIG/common/arch/arm64/configs/topaz_defconfig ];then
              ##bash $CONFIG/common/scripts/kconfig/merge_config.sh -m $CONFIG/common/arch/arm64/configs/gki_defconfig $CONFIG/common/arch/arm64/configs/topaz_defconfig
              ##mv -f .config $CONFIG/common/arch/arm64/configs/gki_defconfig
              #rm $CONFIG/common/arch/arm64/configs/gki_defconfig 
              #cp $CONFIG/common/arch/arm64/configs/topaz_defconfig $CONFIG/common/arch/arm64/configs/gki_defconfig
              defconfig="$GITHUB_WORKSPACE/$CONFIG/common/arch/arm64/configs/topaz_defconfig"
            else
              defconfig="$GITHUB_WORKSPACE/$CONFIG/common/arch/arm64/configs/gki_defconfig"
            fi
          fi
          sed -i '/LOCALVERSION/d' ${defconfig}
          echo 'CONFIG_LOCALVERSION=""' >> ${defconfig}
          echo 'CONFIG_LOCALVERSION_AUTO=y' >> ${defconfig}
          sed -i '/CONFIG_WERROR/d' ${defconfig}
          echo "CONFIG_WERROR=n" >> ${defconfig}
          sed -i '/CONFIG_KSU/d' ${defconfig}
          echo "CONFIG_LTO=y" >> ${defconfig}
          echo "CONFIG_LTO_CLANG=y" >> ${defconfig}
          echo "CONFIG_ARCH_SUPPORTS_LTO_CLANG=y" >> ${defconfig}
          echo "CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y" >> ${defconfig}
          echo "CONFIG_HAS_LTO_CLANG=y" >> ${defconfig}
          echo "CONFIG_LTO_NONE=n" >> ${defconfig}
          echo "CONFIG_LTO_CLANG_FULL=n" >> ${defconfig}
          echo "CONFIG_LTO_CLANG_THIN=y" >> ${defconfig}
          #Make sure to unspoof KCONFIG_FILE in common/kernel/Makefile
          sed -E -i 's|\$\(obj\)/config_data:.+|\$(obj)/config_data: \$(KCONFIG_CONFIG) FORCE|g' $GITHUB_WORKSPACE/$CONFIG/common/kernel/Makefile
          pushd $CONFIG/common/kernel/
          echo '#!/bin/bash' > manipulating_conf_data.sh
          echo 'SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"' >> manipulating_conf_data.sh
          echo 'for conf_data in $(find $SCRIPTPATH/../.. -type f -name ".config" -o -name "config_data" 2>/dev/null);do' >> manipulating_conf_data.sh
          echo 'echo $conf_data' >> manipulating_conf_data.sh
          #echo 'loglevel=1;sed -E -i '\''s/(CONFIG_.+_LOGLEVEL_[^=]+=)(.+)/\1'\''$loglevel'\''/g'\'' $conf_data' >> manipulating_conf_data.sh
          echo 'array=$(cat $conf_data | grep -E '\''_LPU(_|=)'\'' | tr '\''\n'\'' '\''@'\'')' >> manipulating_conf_data.sh
          echo 'IFS='\''@'\'';for item  in ${array}; do sed -i '\''s/'\''${item}'\''/'\''${item}'\''\n'\''$(echo $item | sed '\''s/LPU/KSU/g'\'')'\''/g'\'' $conf_data; done; done' >> manipulating_conf_data.sh
          #echo 'sed -E -i '\''s/_LPU(_|=)/_KSU\1/g'\'' $conf_data; done' >> manipulating_conf_data.sh 
          chmod +x manipulating_conf_data.sh
          popd
          sed -E -i 's|(^[[:space:]]+)(\$\(call if_changed,gzip\))|\1\$(srctree)/kernel/manipulating_conf_data.sh $(realpath kernel/config_data)\; \\\n\1\2|g' $CONFIG/common/kernel/Makefile

          # for clang-22
          if [ -d $GITHUB_WORKSPACE/clang-22 ];then
            pushd $GITHUB_WORKSPACE/$CONFIG
            #Remove old clang revisions and create a link to clang-22
            clang_bin=$(find $GITHUB_WORKSPACE/clang-22 -type l -name 'clang' 2>/dev/null | head -n 1)
            [ -z $clang_bin ] && clang_bin=$(find $GITHUB_WORKSPACE/clang-22 -type f -name 'clang' 2>/dev/null | head -n 1)
            [ -e $GITHUB_WORKSPACE/clang-22/bin/clang ] && clang_bin="$GITHUB_WORKSPACE/clang-22/bin/clang"
            [ -z $clang_bin ] && echo "clang not found" && false
            rm -rf prebuilts/clang/host/linux-x86/clang-*
            cd prebuilts/clang/host/linux-x86/ && ln -s -T $GITHUB_WORKSPACE/clang-22 clang-$($clang_bin -dumpversion)
            #echo 'clang -print-runtime-dir'
            #$clang_bin -print-runtime-dir
            #echo 'clang -print-search-dirs'
            #$clang_bin -print-search-dirs
            

            # Update build config constants
            sed -i \
             -e 's/^BRANCH=.*/BRANCH=android13-5.15/' \
             -e 's/^CLANG_VERSION=.*/CLANG_VERSION='$($clang_bin -dumpversion)'/' \
             ${GITHUB_WORKSPACE}/$CONFIG/common/build.config.constants

             # Remove defconfig check (if exists)
             sed -i '/^POST_DEFCONFIG_CMDS="check_defconfig"/d' ${GITHUB_WORKSPACE}/$CONFIG/common/build.config.gki

             ##this fix the error that present on clang 21,22 and so on.
             #cp ${GITHUB_WORKSPACE}/kernel_patches/0001-treewide-clang-compilation-fixup.patch ${GITHUB_WORKSPACE}/$CONFIG/common
             #cd ${GITHUB_WORKSPACE}/$CONFIG/common
             #patch -p1 < 0001-treewide-clang-compilation-fixup.patch || true

             popd
          fi

          curl https://android.googlesource.com/kernel/common/+/refs/heads/android13-5.15-lts/scripts/setlocalversion?format=TEXT | base64 -d > ${GITHUB_WORKSPACE}/$CONFIG/common/scripts/setlocalversion && chmod +x ${GITHUB_WORKSPACE}/$CONFIG/common/scripts/setlocalversion
          #cat $CONFIG/common/kernel/Makefile
          #cp "${GITHUB_WORKSPACE}/Kconfig" $CONFIG/common/
          #cp "${GITHUB_WORKSPACE}/arch/arm64/Kconfig" $CONFIG/common/arch/arm64/
          #cp "${GITHUB_WORKSPACE}/drivers/remoteproc/Kconfig" $CONFIG/common/drivers/remoteproc/
          #cp "${GITHUB_WORKSPACE}/drivers/soc/qcom/Kconfig" $CONFIG/common/drivers/soc/qcom/
          #cp -a "${GITHUB_WORKSPACE}/drivers/soc/qcom/hab" $CONFIG/common/drivers/soc/qcom/
          #cp -a "${GITHUB_WORKSPACE}/drivers/power" $CONFIG/common/drivers/
          #cp "${GITHUB_WORKSPACE}/kernel/irq/Kconfig" $CONFIG/common/kernel/irq/
          #cp "${GITHUB_WORKSPACE}/net/wireless/Kconfig" $CONFIG/common/net/wireless/
          #cp -a "${GITHUB_WORKSPACE}/arch/arm64/configs/vendor" $CONFIG/common/arch/arm64/configs/
          #find ${GITHUB_WORKSPACE}/ -type f -name 'build*' -exec cp {} $CONFIG/common/ \;
          #find ${GITHUB_WORKSPACE}/ -type f -name 'modules*' -exec cp {} $CONFIG/common/ \;
          #if test -d $CONFIG/common/drivers; then
             # cd $CONFIG/common/
              #yes "" | make gki_defconfig $defconfig ARCH=arm64 O="$CONFIG/common/out/"
          #elif test -d $CONFIG/drivers; then
              #cd $CONFIG
              #yes "" | make gki_defconfig $defconfig ARCH=arm64 O="$CONFIG/out"
          #fi  
          #sed -E -i  '/if.+GKI_BUILD_CONFIG_FRAGMENT.+then/,/fi/d' $CONFIG/common/build.config.gki.aarch64
          echo "defconfig=${defconfig}" >> $GITHUB_ENV
          
      - name: Add KernelSU
        run: |
          [ ${{ env.ksu_fork }} == 'KSUN' ]  && BRANCH="-s next"  || BRANCH="-s main"
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV;echo $BRANCH
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          [ ${{ env.ksu_fork }} == 'KSUN' ]  && echo "Adding KernelSU Next..."
          [ ${{ env.ksu_fork }} == 'SUKISU' ] && echo "Adding SukiSU Ultra..."
          #if [ ${{ env.ksu_fork }} == 'KSUN' -o ${{ env.include_susfs }} == 'false'  ];then
          GKI_ROOT=$(pwd)
          test -d "$GKI_ROOT/common/drivers" &&  DRIVER_DIR="$GKI_ROOT/common/drivers" ||  DRIVER_DIR="$GKI_ROOT/drivers"
          DRIVER_MAKEFILE=$DRIVER_DIR/Makefile
          DRIVER_KCONFIG=$DRIVER_DIR/Kconfig
          [ ! -d $DRIVER_DIR ] && exit 123
          cd "$DRIVER_DIR"
          ln -sf "${GITHUB_WORKSPACE}/kernel" "linuxxpu" && echo "[+] Symlink created."
          # Add entries in Makefile and Kconfig if not already existing
          grep -q "linuxxpu" "$DRIVER_MAKEFILE" || printf "\nobj-\$(CONFIG_LPU) += linuxxpu/\n" >> "$DRIVER_MAKEFILE" && echo "[+] Modified Makefile."
          grep -q "source \"drivers/linuxxpu/Kconfig\"" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\source \"drivers/linuxxpu/Kconfig\"" "$DRIVER_KCONFIG" && echo "[+] Modified Kconfig."
          echo '[+] Done.'
          #fi
          cd "${GITHUB_WORKSPACE}/$CONFIG"
          ln -s ${GITHUB_WORKSPACE} ./KernelSU-Next
          ln -s ${GITHUB_WORKSPACE} ./kernelsu
          for files in $(grep -R ../kernel_patches -e 'ksud' 2>/dev/null | grep -v 'https' | grep -v 'rustix::' | cut -d':' -f1 | sort | uniq);do sed -i 's|ksud|lpud|g' $files;done
          for files in $(grep -R ../kernel_patches -e 'ksu' 2>/dev/null | grep -v 'https' | grep -v 'rustix::' | cut -d':' -f1 | sort | uniq);do sed -i 's|ksu|lpu|g' $files;done
          
      - name: Symbol magic
        run: |
          echo "[+] Export all symbol from abi_gki_aarch64.xml"
          COMMON_ROOT=${CONFIG}/common
          KSU_ROOT=$GITHUB_WORKSPACE
          ABI_XML=$COMMON_ROOT/android/abi_gki_aarch64.xml
          SYMBOL_LIST=$COMMON_ROOT/android/abi_gki_aarch64
          # python3 $KSU_ROOT/scripts/abi_gki_all.py $ABI_XML > $SYMBOL_LIST
          echo "[+] Add KernelSU-Next symbols"
          cat $KSU_ROOT/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST
          
      - name: Apply SUSFS Patches for KernelSU Variants
        if: ${{ env.include_susfs == 'true' }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          # MY CHANGES
          for files in $(grep -R ../susfs4ksu -e 'ksud' 2>/dev/null | grep -v 'https' | grep -v 'rustix::' | cut -d':' -f1 | sort | uniq);do sed -i 's|ksud|lpud|g' $files;done
          for files in $(grep -R ../susfs4ksu -e 'ksu' 2>/dev/null | grep -v 'https' | grep -v 'rustix::' | cut -d':' -f1 | sort | uniq);do sed -i 's|ksu|lpu|g' $files;done

          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          [ ${{ env.ksu_fork }} == 'KSUN' ] && echo "Applying SUSFS patches for KernelSU-Next..." || echo "Applying SUSFS patches for SukiSU Ultra..."
          cd ./KernelSU-Next
          #cp ./kernel_patches/next/kernel-implement-susfs-v1.5.7-gki.patch ./
          #[ ${{ env.ksu_fork }} == 'KSUN' ] && patch -p1 --forward < kernel-implement-susfs-v1.5.7-gki.patch
          # Change to common directory and apply common SUSFS patch
          cd ./$CONFIG/common
          if [[ "${{ env.kernel_variant }}" != "chickernel" ]];then patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch;fi

          if ! grep -qxF '#define CMD_SUSFS_HIDE_SUS_MNTS_FOR_ALL_PROCS 0x55561' ./include/linux/susfs_def.h; then
            #curl -Ls https://raw.githubusercontent.com/fatalcoder524/kernel_patches_additional/refs/heads/main/hide_sus_mnts_for_all_procs.patch  | patch -p1 -F 3
            echo "applying hide_sus_mnts_for_all_procs patch ..."
            cp ../../kernel_patches/hide_sus_mnts_for_all_procs.patch ./
            patch -p1 -F 3 < hide_sus_mnts_for_all_procs.patch
          else
            echo "Line already present. Skipping SUSFS_HIDE_SUS_MNTS_FOR_ALL_PROCS Patch."
          fi

          #sed -i '/bool ksu_devpts_hook = false;/d' $GITHUB_WORKSPACE/kernel/sucompat.c
          #cd $GITHUB_WORKSPACE/$CONFIG/common
          #mkdir $GITHUB_WORKSPACE/debug
          #cp fs/exec.c fs/stat.c $GITHUB_WORKSPACE/debug/
          
      #- name: Upload the linuxxpu with the latest changes
        #uses: actions/upload-artifact@v4.6.2
        #with:
          #name: patch-debug
          #path: debug
          #include-hidden-files: true
          
      - name: Apply New Hooks Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"

          if [ "${{ inputs.ksu_fork }}" == "KSUN" -a "${{ env.kernel_variant }}" != "chickernel" ]; then
            echo "Applying manual hooks for KernelSU-Next..."
            cp ../../kernel_patches/next/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ inputs.ksu_fork }}" == "SUKISU" -a "${{ env.kernel_variant }}" != "chickernel"  -a "${{ env.hook_method }}" == "manual" ]; then
            echo "Applying manual hooks for SukiSU Ultra..."
            cp ../../kernel_patches/sukisu/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ inputs.ksu_fork }}" == "SUKISU" -a "${{ env.kernel_variant }}" != "chickernel"  -a "${{ env.hook_method }}" == "tracepoint" ]; then
            echo "Applying tracepoint hooks for SukiSU Ultra..."
            cp ../../kernel_patches/sukisu/sukisu_tracepoint_hooks.patch ./
            patch -p1 -F 3 < sukisu_tracepoint_hooks.patch
          fi
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/common"
          # Apply additional patch
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
            
      - name: Add Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Adding configuration settings to gki_defconfig..."
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ${defconfig}
          echo "CONFIG_KSU_CMDLINE=y" >> ${defconfig}
          #echo "CONFIG_KSU_MULTI_MANAGER_SUPPORT=y" >> ${defconfig}
          echo "CONFIG_KSU_LSM_SECURITY_HOOKS=y" >> ${defconfig}
          echo "CONFIG_KPM=y" >> ${defconfig}
          if [ ${{ env.ksu_fork }} == 'SUKISU' -a "${{ env.hook_method }}" == "tracepoint" ];then
            echo "CONFIG_TRACEPOINTS=y" >> ${defconfig}
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> ${defconfig}
          else
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ${defconfig}
          fi
          
          
          #if [ "${{ inputs.linuxxpu_variant }}" == "Next" ]; then
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ${defconfig}
          echo "CONFIG_KSU_KPROBES_HOOK=n"  >> ${defconfig}
          #fi
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ${defconfig}
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ${defconfig}

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ${defconfig}
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ${defconfig}
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ${defconfig}

          # Add BBR Config
          if [ $(grep -q 'CONFIG_TCP_CONG_ADVANCED=y' ${defconfig};echo $?) -ne 0 ];then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ${defconfig} 
            echo "CONFIG_TCP_CONG_BIC=n" >> ${defconfig}
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ${defconfig}
            echo "CONFIG_TCP_CONG_HTCP=n" >> ${defconfig}
            echo "CONFIG_NET_SCH_FQ=y" >> ${defconfig}
          fi
          echo "CONFIG_TCP_CONG_BBR=y" >> ${defconfig}
           

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          if [ ! -f build/build.sh ];then
            tar -xzkf ${GITHUB_WORKSPACE}/.github/scripts/build.tar.gz -C build/
            for file in $(find build/ -type f -name '*.sh' 2>/dev/null);do sed -i 's|/\/build\/|build\/|g' $file;chmod +x $file;done
          fi

          KERNEL_VERSION="${{ inputs.kernel_version }}"
          MIN_VERSION="5.16"
          
          if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
            echo "Patching ptrace!"
            #curl -Ls https://raw.githubusercontent.com/fatalcoder524/kernel_patches_additional/refs/heads/main/ptrace.patch  | patch -p1 -F 3
            cd "${GITHUB_WORKSPACE}/${CONFIG}/common"
            cp $GITHUB_WORKSPACE/kernel_patches/ptrace.patch ./
            patch -p1 -F 3 < ptrace.patch
          else
            echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
          fi

          #Remove Abi Exports and Error
          rm -rf ./common/android/abi_gki_protected_exports_* || true

          #for file in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'is_manager_apk' 2>/dev/null | cut -d':' -f1 |  sort | uniq );do sed -E -i 's/([[:space:]]+)is_manager_apk/\1lpu_is_manager_apk/g' $file;done
          
      - name: Copy source files & apply LZ4KD & ZSTDN patches
        run: |
          if [[ "${{ env.ZRAM }}" == "true" ]]; then
            echo "Changing to configuration directory: $CONFIG..."
            cd "$CONFIG/common"
            cp -r ../../kernel_patches/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../../kernel_patches/other/zram/lz4k/lib/* ./lib/
            cp -r ../../kernel_patches/other/zram/lz4k/crypto/* ./crypto/
            cp -r ../../kernel_patches/other/zram/lz4k_oplus ./lib/
          
            cp ../../kernel_patches/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
            echo "Applying lz4kd patch"
            patch -p1 -F 3 < lz4kd.patch || true
            echo 'Completed LZ4KD patch'

            cp ../../kernel_patches/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./
            echo "Applying lz4k_oplus patch"
            patch -p1 -F 3 < lz4k_oplus.patch || true
            echo 'Completed lz4k_oplus patch'
          fi

      - name: LZ4KD&Lz4k_oplus Configuration
        run: |
          if [[ "${{ env.ZRAM }}" == "true" ]]; then
            echo "Write LZ4KD&ZSTDN config dependency"
            CONFIG_FILE="${defconfig}"

            if [ "${{ inputs.kernel_version }}" = "5.10" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
              echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
            fi

            if [ "${{ inputs.kernel_version }}" != "6.6" ] && [ "${{ inputs.kernel_version }}" != "5.10" ]; then
              # sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' "$CONFIG_FILE"
              if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                  echo "Hint: The file $CONFIG_FILE contains the string CONFIG_ZSMALLOC."
                  sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
              else
                  echo "Warning: File $CONFIG_FILE does not contain string CONFIG_ZSMALLOC."
                  echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              fi
                
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
              sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
              echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
              echo 'Android14_Bazel: Fixed zram & zsmalloc'
            elif [ "${{ inputs.kernel_version }}" = "5.10" ] || [ "${{ inputs.kernel_version }}" = "5.15" ]; then
              rm "$CONFIG/common/android/gki_aarch64_modules"
              touch "$CONFIG/common/android/gki_aarch64_modules"
              echo '5.10&5.15: Fixed zram&zsmalloc'
            fi

             if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
              echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
            fi
          fi   
          
      - name: Add SUSFS Configuration Settings
        if: ${{ env.include_susfs == 'true' }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Adding SUSFS configuration settings to gki_defconfig..."
          echo "CONFIG_KSU_SUSFS=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ${defconfig}
          #echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ${defconfig}
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ${defconfig}

          #if [ "${{ inputs.linuxxpu_variant }}" == "Next" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ${defconfig}
          #else
          #echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ${defconfig}
          #fi

      - name: Adding log reduction and debug reduction configurations
        #if: false
        run: |
          cd "$CONFIG"
          #if [ ! -f ./common/security/selinux/include/flask.h ];then
            #cp  ../kernel_patches/flask.h ./common/security/selinux/include/
          #fi
          #echo "CONFIG_AUDIT=n" >> ${defconfig}
          #echo "CONFIG_AUDITSYSCALL=n" >> ${defconfig}
          if grep -Eq '^CONFIG_CMDLINE=.+' ${defconfig};then cmdline_str=$(echo "CONFIG_CMDLINE=\"$(grep -E '^CONFIG_CMDLINE=.+' ${defconfig} | cut -d '"' -f2) audit=0 printk.devkmsg=off\"");else cmdline_str='CONFIG_CMDLINE="audit=0 printk.devkmsg=off"';fi
          #cmdline_str='CONFIG_CMDLINE="mminit_loglevel=0 stack_depot_disable=on kasan.stacktrace=off kvm-arm.mode=protected cgroup_disable=pressure audit=0 loglevel=1 printk.devkmsg=off quiet lpm_levels.sleep_disabled=1 console=ttyMSM0,115200n8 msm_rtb.filter=0x237 service_locator.enable=1 swiotlb=2048 loop.max_part=7 cpufreq.default_governor=performance rcupdate.rcu_expedited=1 rcu_nocbs=0-7 kpti=off export_pmu_events movable_node ftrace_dump_on_oops ssbd=force-off disable_dma32=on cgroup.memory=nokmem,nosocket video=vfb:640x400,bpp=32,memsize=3072000 no_debug_objects qcom_geni_serial.con_enabled=0 bootconfig bootinfo.pureason=0x40001 bootinfo.pdreason=0x2 msm_drm.dsi_display0=qcom,mdss_dsi_panel_m7_38_0c_0a_fhdp_video: fpc1020_platform_tee.fpsensor=2 focaltech_ts_i2c.tpsensor=focaltech_ts rootwait ro init=/init mem= memhp_default_state=online log_buf_len=2M"'
          #echo $cmdline_str
          sed -i -e '/CONFIG_CMDLINE=/d' -e '/CONFIG_CMDLINE_EXTEND/d'  -e '/CONFIG_CMDLINE_FORCE/d' -e '/CMDLINE_FROM_BOOTLOADER/d' ${defconfig}
          echo "$cmdline_str" >> ${defconfig}
          echo "CONFIG_CMDLINE_EXTEND=y" >> ${defconfig}
          #echo "CONFIG_CMDLINE_FORCE=y" >> ${defconfig}
          #sed -i -e '/CONFIG_CONSOLE_LOGLEVEL_DEFAULT/d' -e '/CONFIG_CONSOLE_LOGLEVEL_QUIET/d' -e '/CONFIG_MESSAGE_LOGLEVEL_DEFAULT/d' ${defconfig}
          #echo "CONFIG_CONSOLE_LOGLEVEL_DEFAULT=1" >> ${defconfig}
          #echo "CONFIG_CONSOLE_LOGLEVEL_QUIET=1" >> ${defconfig}
          #echo "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=1" >> ${defconfig}
          #sed -i -e 's/CONSOLE_LOGLEVEL_DEFAULT/CONSOLE_LOGLEVEL_MIN/g' -e 's/MESSAGE_LOGLEVEL_DEFAULT/CONSOLE_LOGLEVEL_MIN/g' ./common/kernel/printk/printk.c
          #sed -i -e '/CONFIG_BUG=/d' -e '/CONFIG_DEBUG_INFO=/d' ${defconfig}
          #sed -i '/CONFIG_DEBUG_INFO=/d' ${defconfig}
          #echo "CONFIG_BUG=n" >> ${defconfig}
          #echo "CONFIG_DEBUG_INFO=n" >> ${defconfig}
          #echo "CONFIG_DEBUG_KERNEL=n" >> ${defconfig}   
          #echo "CONFIG_DEBUG_MISC=n" >> ${defconfig}
          #echo "CONFIG_PRINTK=n" >> ${defconfig}
          #sed -i 's/CONFIG_KSU_SUSFS_ENABLE_LOG=y/CONFIG_KSU_SUSFS_ENABLE_LOG=n/g' ${defconfig}
        
      - name: Build kernel
        env:
          ACTIONS_STEP_DEBUG: true
        run: |
          set -e
          set -x
          cd "$CONFIG"

          if [ ! -d $GITHUB_WORKSPACE/clang-22 ];then
            export LIBRARY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/lib64
            export CPATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/include
          fi
          export API=$(echo ${{ inputs.android_version }} | sed 's/android1/3/g')
          My_Args=' -mcpu=cortex-a53+crypto+crc -mtune=cortex-a73 -march=armv8-a+crypto+crc -O3 -funroll-loops '
          #export KBUILD_BUILD_TIMESTAMP=$(date -u -d "3 month ago")
          #export KBUILD_BUILD_TIMESTAMP='Tue May 14 09:27:18 UTC 2024'
          export KBUILD_BUILD_TIMESTAMP='Fri May 23 03:46:04 UTC 2025'
          export KBUILD_BUILD_USER='ahmad'
          export KBUILD_BUILD_HOST='Forozan'
          sed -E -i -e 's|LC_ALL=C|LC_ALL=C;KBUILD_BUILD_TIMESTAMP="'"${KBUILD_BUILD_TIMESTAMP}"'";KBUILD_BUILD_USER="'"${KBUILD_BUILD_USER}"'";KBUILD_BUILD_HOST="'"${KBUILD_BUILD_HOST}"'";|g' -e 's|LINUX_COMPILE_BY=.+|LINUX_COMPILE_BY="'${KBUILD_BUILD_USER}'"|g' -e 's|LINUX_COMPILE_HOST=.+|LINUX_COMPILE_HOST="'${KBUILD_BUILD_HOST}'"|g' ./common/scripts/mkcompile_h
          if test -d ${GITHUB_WORKSPACE}/manager ;then
            set +e
            set +x
            declare -a options
            # Array with 7 members (root managers)
            for i in {0..6};do options+=(false);done
            case "${{ inputs.manager_supports }}" in 'All managers') for i in $(seq 0 $((${#options[@]}-1)));do options[$i]=true;done;;'none') for i in $(seq 0 $((${#options[@]}-1)));do options[$i]=false;done;;'official') options[0]=true;;'rsuntk') options[1]=true;;'backslashxx') options[2]=true;;'kernelsu-next') options[3]=true;;'mksu') options[4]=true;;'sukisu') options[5]=true;;'wild-ksun') options[6]=true;;*) for i in $(seq 0 $((${#options[@]}-1)));do options[$i]=false;done;;esac
            #options="${{ inputs.manager_supports }}" 
            #echo "${options}"
            if [[ ${options[*]} =~ true ]];then
              #default_size=$(grep -Eo '[^[:space:]]+_(EXPECTED|MANAGER)_SIZE := [0-9a-fA-FXx]+' ${GITHUB_WORKSPACE}/kernel/Makefile 2>/dev/null | cut -d' ' -f3)
              #test -z ${default_size} && exit 1
              default_size='0x373'
              #default_hash=$(grep -Eo '[^[:space:]]+_(EXPECTED|MANAGER)_HASH := .+' ${GITHUB_WORKSPACE}/kernel/Makefile 2>/dev/null | cut -d' ' -f 3)
              #test -z ${default_hash} && exit 1
              default_hash='5028506331f6c9f189e2f6500d90c3d6972bd7033e960fed4b5dda1fe31a5e95'
              declare -a managers_size;
              declare -a managers_hash;
              managers_size=(${default_size})
              managers_hash=(${default_hash})
              #1 : official ksu
              if [[ ${options[0]} == true ]];then
                if [ ${default_size} != "0x33b" ];then
                  managers_size+=("0x33b")
                  managers_hash+=("c371061b19d8c7d7d6133c6a9bafe198fa944e50c1b31c9d8daa8d7f1fc2d2d6")
                fi
              fi
              #2 : rsuntk //Rissu KernelSU Fork
              if [[ ${options[1]} == true ]];then
                if [ ${default_size} != "0x396" ];then
                  managers_size+=("0x396")
                  managers_hash+=("f415f4ed9435427e1fdf7f1fccd4dbc07b3d6b8751e4dbcec6f19671f427870b")
                fi
              fi
              #3 : backslashxx
              if [[ ${options[2]} == true ]];then
                if [ ${default_size} != "0x363" ];then
                  managers_size+=("0x363")
                  managers_hash+=("4359c171f32543394cbc23ef908c4bb94cad7c8087002ba164c8230948c21549")
                fi
              fi
              #4 : kernelsu-next // rifsxd
              if [[ ${options[3]} == true ]];then
                if [ ${default_size} != "0x3e6" ];then
                  managers_size+=("0x3e6")
                  managers_hash+=("79e590113c4c4c0c222978e413a5faa801666957b1212a328e46c00c69821bf7")
                fi
              fi
              #5 : mksu // MKSU 5ec1cff 💜
              if [[ ${options[4]} == true ]];then
                if [ ${default_size} != "384" ];then
                  managers_size+=("384")
                  managers_hash+=("7e0c6d7278a3bb8e364e0fcba95afaf3666cf5ff3c245a3b63c8833bd0445cc4")
                fi
              fi
              #6 : sukisu // ShirkNeko
              if [[ ${options[5]} == true ]];then
                if [ ${default_size} != "0x35c" ];then
                  managers_size+=("0x35c")
                  managers_hash+=("947ae944f3de4ed4c21a7e4f7953ecf351bfa2b36239da37a34111ad29993eef")
                fi
              fi
              #7 : wild-ksun // James McConnell's ksun fork
              if [[ ${options[6]} == true ]];then
                if [ ${default_size} != "0x35c" ];then
                  managers_size+=("0x39b")
                  managers_hash+=("593d4ce870c02468639efeef631e07ca4d852d63f154be56706229f9a5be0800")
                fi
              fi
              SUPPORTED_MANAGER_COUNT="${#managers_size[@]}"
              #for (( i=0; i<$SUPPORTED_MANAGER_COUNT; i++ )); do echo "${managers_size[$i]}:${managers_hash[$i]}" ; done
              grep -Eq 'apk_sign_keys\[\] =.+' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
              if [ $? -eq 0 ];then
                temp_str="$(grep -E '.+apk_sign_keys\[\] = .*' ${GITHUB_WORKSPACE}/kernel/apk_sign.c 2>/dev/null)\n"
                for (( i=0; i<$SUPPORTED_MANAGER_COUNT; i++ )); do 
                  temp_str="${temp_str}\t\{${managers_size[$i]}, \"${managers_hash[$i]}\"\},\n"
                done
                sed -E -i -e '/.*\{(EXPECTED|MANAGER)_SIZE.*\,.*(EXPECTED|MANAGER)_HASH.*\}.+/d' -e '/.*\{(expected|manager)_size.*\,.*(expected|manager)_hash.*\}.+/d' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
                sed -E -i 's/(.+apk_sign_keys\[\] \=.*)/'"${temp_str}"'/g' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
                for file in $(grep -R {GITHUB_WORKSPACE}/kernel -e 'define MAX_MANAGERS' 2>/dev/null | cut -d':' -f1 | sort | uniq);do sed -E -i 's|#define MAX_MANAGERS.+|#define MAX_MANAGERS '$SUPPORTED_MANAGER_COUNT'|g' $file;cat $file;done
              else
                #sed -E -i 's|(bool .*is_manager_apk\(char \*path\)\;)|#define SUPPORTED_MANAGER_COUNT '${SUPPORTED_MANAGER_COUNT}'\nextern unsigned MANAGER_SIZE[SUPPORTED_MANAGER_COUNT];\nextern const char *MANAGER_HASH[SUPPORTED_MANAGER_COUNT];\n\n\1|g' ${GITHUB_WORKSPACE}/kernel/apk_sign.h
                #sed -E -i '/bool .*is_manager_apk\(char \*.+/,/}/d' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
                #sed -E -i -e 's|(bool .*is_manager_apk\(char \*.+\))|\nunsigned MANAGER_SIZE\[SUPPORTED_MANAGER_COUNT\]=\{'$(echo "${managers_size[*]}" | tr ' ' ', ')'\}\;\nconst char *MANAGER_HASH\[SUPPORTED_MANAGER_COUNT\]=\{'$(echo $(for i in "${managers_hash[@]}" ; do printf '"%s" ' "$i";done) | tr ' ' ', ')'\}\;\n\nbool lpu_is_manager_apk(char *path)|g' -e 's|return [^[:space:]]?check_v2_signature\(.+|int i\;\n        bool result = false\;\n\n        for \(i = 0\; i \< SUPPORTED_MANAGER_COUNT\; i++\)\n        \{\n           result = check_v2_signature\(path, MANAGER_SIZE[i], MANAGER_HASH[i]\)\;\n           if (result\)  \{ return result\;\}\n        \}\n     return result\;\n|g' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
                sed -E -i -e 's|(bool .*)(is_manager_apk\(char \*.+\))|\n#define SUPPORTED_MANAGER_COUNT '${SUPPORTED_MANAGER_COUNT}'\nunsigned MANAGER_SIZE\[SUPPORTED_MANAGER_COUNT\]=\{'$(echo "${managers_size[*]}" | tr ' ' ', ')'\}\;\nconst char *MANAGER_HASH\[SUPPORTED_MANAGER_COUNT\]=\{'$(echo $(for i in "${managers_hash[@]}" ; do printf '"%s" ' "$i";done) | tr ' ' ', ')'\}\;\n\n\1is_manager_apk(char *path)|g' -e 's|return [^[:space:]]?check_v2_signature\([^\;]+;|int i\;\n        bool result = false\;\n\n        for \(i = 0\; i \< SUPPORTED_MANAGER_COUNT\; i++\)\n        \{\n           result = check_v2_signature\(path, MANAGER_SIZE[i], MANAGER_HASH[i]\)\;\n           if (result\)  \{ return result\;\}\n        \}\n     return result\;\n|g' ${GITHUB_WORKSPACE}/kernel/apk_sign.c
                #echo -e '\nunsigned MANAGER_SIZE[SUPPORTED_MANAGER_COUNT]={'$(echo "${managers_size[*]}" | tr ' ' ', ')'};\nconst char *MANAGER_HASH[SUPPORTED_MANAGER_COUNT]={'$(echo $(for i in "${managers_hash[@]}" ; do printf '"%s" ' "$i";done) | tr ' ' ', ')'};\n\nbool lpu_is_manager_apk(char *path)\n{\n        int i;\n        bool result = false;\n\n        for (i = 0; i < SUPPORTED_MANAGER_COUNT; i++)\n     {\n             result = check_v2_signature(path, MANAGER_SIZE[i], MANAGER_HASH[i]);\n           if (result)  { return result;}\n        }\n     return result;\n}\n' >> ${GITHUB_WORKSPACE}/kernel/apk_sign.c
              fi
              cat ${GITHUB_WORKSPACE}/kernel/apk_sign.c
            fi
            #sed -i 's|KernelSU|LinuxxPU|g' $(find . -type f -name 'ksu.c')
            #sed -i 's|kernelsu|linuxxpu|g' $(find . -type f -name 'ksu.c')
            #sed -i 's|kernelsu|linuxxpu|g' $(find . -type f -name 'ksud.c')
            #sed -i 's|kernelsu|linuxxpu|g' $(find . -type f -name 'rules.c')
            #sed -i 's|kernelsu|linuxxpu|g' $(find . -type f -name 'selinux.h')
            sed  -i 's/_KSU_/_LPU_/g' ${defconfig}
            sed  -i 's/CONFIG_KSU/CONFIG_LPU/g' ${defconfig}
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'sukisu.ultra' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|sukisu.ultra|linuxxpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'SukiSU.Ultra' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i '/REPO_(OWNER|NAME)( :)?=/! s/SukiSU.Ultra/LinuxxPU/g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'SUKISU.ULTRA' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|SUKISU.ULTRA|LINUXXPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'SUKISU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|SUKISU|LINUXXPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'sukisu' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|sukisu|linuxxpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'SukiSU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i '/REPO_(OWNER|NAME)( :)?=/! s/SukiSU/LinuxxPU/g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KernelSU.Next' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i '/REPO_(OWNER|NAME)( :)?=/! s/KernelSU.Next/LinuxxPU/g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'kernelsu.next' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|kernelsu.next|linuxxpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KSU.NEXT' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -E -i 's|KSU.NEXT|LinuxxPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'ksunext' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|ksunext|linuxxpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KERNELSU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|KERNELSU|LINUXXPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KERNEL_SU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|KERNEL_SU|LINUXXPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KernelSU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i '/REPO_(OWNER|NAME)( :)?=/! s/KernelSU/LinuxxPU/g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'kernelsu' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|kernelsu|linuxxpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KSURC' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|KSURC|LPURC|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KSUD' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed  -i 's|KSUD|LPUD|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KSU' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed  -i 's|KSU|LPU|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'Ksu' 2>/dev/null | cut -d':' -f1 | sort | uniq);do sed -i 's|Ksu|Lpu|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'KSURC' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do sed -i 's|KSURC|LPURC|g' $files;done
            for files in $(grep -R ${GITHUB_WORKSPACE}/kernel -e 'ksu' 2>/dev/null | grep -v 'https' | cut -d':' -f1 | sort | uniq);do echo $files;sed -i 's|ksu|lpu|g' $files;done
            files=('/fs/Makefile' '/fs/Kconfig' '/fs/dcache.c' '/fs/devpts/inode.c' '/fs/exec.c' '/fs/namei.c' '/fs/namespace.c' '/fs/notify/fdinfo.c' '/fs/open.c' '/fs/overlayfs/inode.c' '/fs/overlayfs/readdir.c' '/fs/overlayfs/super.c' '/fs/proc/bootconfig.c' '/fs/proc/fd.c' '/fs/proc/task_mmu.c' '/fs/proc_namespace.c' '/fs/readdir.c' '/fs/stat.c' '/fs/statfs.c' '/include/linux/mount.h' '/include/linux/sched.h' '/kernel/kallsyms.c' '/kernel/sys.c' '/drivers/input/input.c' '/drivers/tty/pty.c' '/fs/read_write.c' '/drivers/Makefile' '/drivers/Kconfig' '/include/linux/sus_su.h' '/include/linux/susfs_def.h' '/include/linux/susfs.h' '/fs/sus_su.c' '/fs/susfs.c' '/security/selinux/avc.c')
            for each in "${files[@]}";do if [ -f "./common${each}" ];then sed -E -i -e 's|KSU|LPU|g' -e 's|KERNEL_SU|LINUXXPU|g' -e  '/REPO_(OWNER|NAME)( :)?=/! s/KernelSU/LinuxxPU/g' -e 's|ksu|lpu|g' -e '/REPO_(OWNER|NAME)( :)?=/! s/SukiSU-Ultra/LINUXXPU/g' -e 's|sukisu|linuxxpu|g' -e '/REPO_(OWNER|NAME)( :)?=/! s/SukiSU Ultra/LINUXXPU/g' -e 's|SUKISU|LINUXXPU|g'  -e '/REPO_(OWNER|NAME)( :)?=/! s/SukiSU/LinuxxPU/g' -e 's|kernelsu|linuxxpu|g' ./common${each};fi;done
            #for file in $(grep -Elr 'KSU|kernelsu|ksuid' ./common/fs ./common/include ./common/kernel ./common/security ./common/drivers 2>/dev/null | sort | uniq);do
              #echo "$file"
              #sed -i -e 's/ksuid/lpuid/g' -e 's/kernelsu/linuxxpu/g' -e 's/KSU/LPU/g' $file
            #done
            set -e
            set -x
          else
            exit 1
            false
          fi

          if [ ! -d ${GITHUB_WORKSPACE}/clang-22 ];then
            #for ndk
            export TOOLCHAIN=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64
            export My_PATH="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${ANDROID_NDK_LATEST_HOME}/prebuilt/linux-x86_64/bin/:${PATH}:$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin"
          fi
          export TARGET=aarch64-linux-android
          #export CC="/usr/bin/ccache clang --target=${TARGET}${API} ${My_Args}"
          export CC="clang --target=${TARGET}${API} ${My_Args}"
          
          #export CC_ARG="${CC}"
          BUILD_CONFIG='common/build.config.gki.aarch64'
          #BUILD_CONFIG='nothing'
          sed -i -e '/^KMI_SYMBOL_LIST_STRICT_MODE=/d' -e '/^TRIM_NONLISTED_KMI=/d' -e '/^KMI_ENFORCED=/d' -e '$a\KMI_SYMBOL_LIST_STRICT_MODE=0' -e '$a\TRIM_NONLISTED_KMI=0' -e '$a\KMI_ENFORCED=0' -e '/^MODULES_ORDER=/d' -e '/^MODULES_LIST=/d' common/build.config.gki.aarch64

          if [ ${{ env.selinux_permissive }} == 'true' ];then
            if grep -Eq '^CONFIG_CMDLINE=.+' ${defconfig};then cmdline_str=$(echo "CONFIG_CMDLINE=\"$(grep -E '^CONFIG_CMDLINE=.+' ${defconfig} | cut -d '"' -f2) selinux=0\"");else cmdline_str='CONFIG_CMDLINE="selinux=0"';fi
            echo $cmdline_str
            sed -i -e '/CONFIG_CMDLINE=/d' -e '/CONFIG_SECURITY_SELINUX_BOOTPARAM/d' ${defconfig}
            echo "$cmdline_str" >> ${defconfig}
            echo "CONFIG_CMDLINE_EXTEND=y" >> ${defconfig}
            echo "CONFIG_SECURITY_SELINUX_BOOTPARAM=y" >> ${defconfig}
          fi

          if [[ "${{ env.kernel_variant }}" == "chickernel" ]];then
            sed -i '/kernelsu/d' ./common/drivers/Kconfig
            #grep -i 'linuxxpu' ./common/drivers/Kconfig
            sed -i '/kernelsu/d' ./common/drivers/Makefile
            #grep -E -i 'CONFIG_(KSU|LPU)' ./common/drivers/Makefile
            rm -f ./common/drivers/kernelsu || true
            BUILD_CONFIG='common/build.config.gki.aarch64.chickernel'
            rm -f ./common/arch/arm64/configs/chickernel_defconfig ./common/arch/arm64/configs/defconfig
            cp  ${defconfig} ./common/arch/arm64/configs/chickernel_defconfig
            cp  ${defconfig} ./common/arch/arm64/configs/defconfig
            #revert commite fed0402  to unspoof /proc/config.gz
            for file in $(grep -e 'arch/arm64/configs/khaje-stock_defconfig' ./common/kernel/* 2>/dev/null | cut -d':' -f1);do sed -i 's|config_data\: arch/arm64/configs/khaje-stock_defconfig|config_data\: \$\(KCONFIG_CONFIG\)|g' $file;done
          elif [[ "${{ env.kernel_variant }}" == *"topnotchfreaks"* ]];then  
            #BUILD_CONFIG='common/build.config.msm.bengal.le'
            #if [ -f common/build.config.msm.topaz ];then 
              #BUILD_CONFIG='common/build.config.msm.topaz'
              #sed -i -e '/build.config.msm.common/d' -e '/build.config.msm.gki/d'  common/build.config.msm.topaz
              #for file in $(find ./common/ -maxdepth 1 -type f -name 'build*' 2>/dev/null);do sed -i 's|msm-kernel/|common/|g' $file;done
              #for file in $(find common/arch/arm64/configs/vendor -type f -name 'topaz*' 2>/dev/null);do ./common/scripts/kconfig/merge_config.sh -m -r -y $file;done
            #fi
            #if [ -f ./common/arch/arm64/configs/topaz_defconfig ];then
              #bash ./common/scripts/kconfig/merge_config.sh -m ${GITHUB_WORKSPACE}/.defconfig ${defconfig}
              #mv -f .config ${defconfig}
            #fi
            #rm -f ./common/arch/arm64/configs/generic_bengal_defconfig ./common/arch/arm64/configs/defconfig
            #cp  ${defconfig} ./common/arch/arm64/configs/generic_bengal_defconfig
            cp  ${defconfig} ./common/arch/arm64/configs/defconfig
            #revert commite 2030317  to unspoof /proc/config.gz
            #for file in $(grep -e 'arch/arm64/configs/topaz_defconfig' ./common/kernel/* 2>/dev/null | cut -d':' -f1);do sed -i 's|config_data\: arch/arm64/configs/topaz_defconfig|config_data\: \$\(KCONFIG_CONFIG\)|g' $file;done
            #ln -s common msm-kernel
          fi

          
          echo "Building the kernel..."
          if [ -f "build/build.sh" ]; then
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
            export BUILD_SCRIPT_DIR=$(dirname $(realpath build/build.sh))

            #for ndk and arm-toolchain and clang-22
            sed -E -i '/.*sysroot_flags\+=.+/d' build/_setup_env.sh

            if [ ! -d ${GITHUB_WORKSPACE}/clang-22 ];then
              sed -E -i 's|source .+_setup_env.sh.+|source "${ROOT_DIR}/build/_setup_env.sh";export PATH="${My_PATH}"|g' build/build.sh
              sed -E -i 's|.*export ROOT_DIR=.+dirname.+$|export ROOT_DIR=$($(find ${BUILD_SCRIPT_DIR} -type f -name "gettop.sh"))|g' build/build.sh
              sed -E -i 's|(if \[ -n \"\$\{MODULES_ORDER\}\" \]\;.+)|\1\n  cp ${OUT_DIR}/modules.order ${KERNEL_DIR}/${MODULES_ORDER}\n|g' build/build.sh
            
              #for ndk 28
              echo "ANDROID_NDK_LATEST_HOME : ${ANDROID_NDK_LATEST_HOME}"
              sudo test -d "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/19/lib/linux/" && sudo ln -s /usr/lib/llvm-18/lib/clang/18/lib/linux/libclang_rt.builtins-x86_64.a  ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/19/lib/linux/libclang_rt.builtins-x86_64.a
              sed -E -i 's|(^[[:space:]]+)build_[^[:space:]]+_dlkm.*|\1echo "dlkm image creation ignored"|g' build/build.sh
              #for ndk
              mkdir -p ./out/${CONFIG}/common && cp ${defconfig} ./out/${CONFIG}/common/.config
              mkdir -p ./out/$(echo ${CONFIG} | cut -d'-' -f1,2)/common && cp ${defconfig} ./out/$(echo ${CONFIG} | cut -d'-' -f1,2)/common/.config
            fi   
            #grep -Ei 'ksu|lpu|susfs' ./out/${CONFIG}/common/.config 
            [ -f ./common/kernel/manipulating_conf_data.sh ] && cat ./common/kernel/manipulating_conf_data.sh
            if [ "${BUILD_CONFIG}" != "nothing" ];then
              LTO=thin BUILD_CONFIG=${BUILD_CONFIG} SKIP_EXT_MODULES=1 SKIP_CP_KERNEL_HDR=1 SKIP_VENDOR_BOOT=1 SKIP_MRPROPER=1 SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 build/build.sh CC="${CC}" 
            else
              LTO=thin SKIP_EXT_MODULES=1 SKIP_CP_KERNEL_HDR=1 SKIP_VENDOR_BOOT=1 SKIP_MRPROPER=1 SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 build/build.sh CC="${CC}" 
            fi
          else
            rm -rf ./common/android/abi_gki_protected_exports_*
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
            #sed -E -i '/^CONFIG_LOCALVERSION=/ s/(.*)"$/\1-Wild+"/' ${defconfig}
            tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
          fi
          #ccache --show-stats

      - name: Patch Image File A12 & A13
        if: ${{ env.ksu_fork  == 'SUKISU' &&  (inputs.android_version == 'android12' || inputs.android_version == 'android13') }}
        #if: false
        run: |
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
            echo "Changing to out directory: $CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist..."
            cd "$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
            [ ! -f Image ] && echo "The file "Image" was not found in the current path!!!" && false
            #curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            cp $GITHUB_WORKSPACE/kernel_patches/sukisu/patch_linux ./patch
            chmod 777 patch
            echo "Patching Image file..."
            ./patch
            rm -rf Image
            mv oImage Image || false
            cd ../../../..
          fi      
          
      - name: Create Bootimgs Folder and Copy Images
        run: |
          #echo "Changing to configuration directory: $CONFIG..."
          mkdir bootimgs

          bootimage_dir=$(dirname $(find ./$CONFIG -type f -name 'Image' 2>/dev/null))

          echo "Creating bootimgs folder and copying images..."
          for file in $(find ${bootimage_dir} -type f -name 'Image*' 2>/dev/null);do cp $file ./bootimgs;cp $file ./;done
          #cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./bootimgs
          #cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./bootimgs
          #cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./
          #cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./
          for file in $(find $CONFIG/out -type f -name '*.tar.gz' 2>/dev/null);do cp $file ${GITHUB_WORKSPACE};done
          # Create gzip of the Image file
          #gzip -n -k -f -9 ./Image > ./Image.gz
          

      - name: Run Boot Image ${{ inputs.android_version }} Build Script
        run: |
          cd bootimgs

          #echo "Building Image.gz"
          #gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          #My added --cmdline to default options
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          zip boot.img.zip boot.img
          cp ./boot.img.zip ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img.zip
          
      - name: Compress all img files with gzip
        run: |
          for image in $(find . -type f -name "*.img" 2>/dev/null); do
            [ -f $image ] && gzip -vnf9 $image
          done
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
            *.img
            *.tar.gz

      - name: Preparing linuxxpu for upload
        run: |
          mkdir -p linuxxpu
          for dir in {kernel,manager,userspace,'.git','.github','TAG_NAME.ME','LPU_FORK.ME','LAST_COMMIT.ME','VERSION.ME'};do
            cp -af $dir linuxxpu || true
          done
          
      - name: Delete linuxxpu Artifact
        uses: GeekyEggo/delete-artifact@v5.1.0
        with: 
          name: linuxxpu
          failOnError: false
          
      - name: Upload the linuxxpu with the latest changes
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linuxxpu
          path: linuxxpu
          include-hidden-files: true

            
