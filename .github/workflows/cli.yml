name: CI
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
concurrency:
      group: staging_environment
      cancel-in-progress: true

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: exit
        if: false
        run: |
          echo "I gave the exit command myself."
          gh release delete "v1.0.7-45" --cleanup-tag -R "${{ github.repository_owner }}/${{ github.event.repository.name }}"
          exit 0
          false
          
      #- name: Checkout code
        #uses: actions/checkout@v5.0.0
        #with:
          #fetch-depth: 0 # fetch full history
          #filter: tree:0

      - name: Test Codes
      # Randomization of package ID and app label
        if: false
        run: |
          sudo apt-get install wamerican uni2ascii
          echo
          echo
          dic=$(mktemp)
          subdict=$(mktemp)
          uni2ascii -B /usr/share/dict/american-english > $dic
          stat $dic
          file $dic
          #exit 0
          rand=$(awk -v min=1 -v max="$(cat $dic | wc -l)" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
          echo .
          app_label=$(awk "NR==${rand} {print}" $dic)
          echo ..
          while [[ ! "$app_label" =~ ^[[:alnum:]]*$ ]] && [[ "$app_label" =~ ^[[:digit:]]+$ ]];do app_label=(awk "NR==${rand_all} {print}" $dic);done
          echo ...
          sed -E -n '/^.{3}$/p' $dic > $subdict
          echo ....
          rand=$(awk -v min=1 -v max="$(cat $subdict | wc -l)" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
          echo .....
          p_id_1=$(awk "NR==${rand} {print}" $subdict)
          echo ......
          while [[ ! "$p_id_1" =~ ^[[:alnum:]]*$ ]] && [[ "$p_id_1" =~ ^[[:digit:]]+$ ]];do p_id_1=$(awk "NR==${rand} {print}" $subdict);done
          sed -E -n '/^.{5}$/p' $dic > $subdict
          rand=$(awk -v min=1 -v max="$(cat $subdict | wc -l)"  'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
          p_id_2=$(awk "NR==${rand} {print}" $subdict)
          while [[ ! "$p_id_2" =~ ^[[:alnum:]]*$ ]] && [[ "$p_id_2" =~ ^[[:digit:]]+$ ]];do p_id_2=$(awk "NR==${rand} {print}" $subdict);done
          sed -E -n '/^.{7}$/p' $dic > $subdict
          rand=$(awk -v min=1 -v max="$(cat $subdict | wc -l)" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
          p_id_3=$(awk "NR==${rand} {print}" $subdict)
          while [[ ! "$p_id_3" =~ ^[[:alnum:]]*$ ]] && [[ "$p_id_3" =~ ^[[:digit:]]+$ ]];do p_id_3=$(awk "NR==${rand} {print}" $subdict);done
          echo "app label: $app_label"
          echo "package id part 1: $p_id_1"
          echo "package id part 2: $p_id_2"
          echo "package id part 3: $p_id_3"
          echo "${p_id_1}.${p_id_2}.${p_id_3}"

      - name: Test Codes 2
        if: true
        run: |
          repo="${{ github.repository_owner }}/${{ github.event.repository.name }}"
          clang22_latest_relase=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/ZyCromerZ/Clang/releases  | grep -Eo '"name":[^,]+' | head -n 1)
          llvm_latest_relase=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/llvm/llvm-project/releases  | grep -Eo '"name":[^,]+' | grep 'Linux-X64.tar.xz"' | head -n 1)
          [ -z "$clang22_latest_relase" ] && { echo "Failed to extract clang22 latest release";exit 1;false; }
          [ -z "$llvm_latest_relase" ] && { echo "Failed to extract llvm latest release";exit 1;false; }
          clang22_latest_release_date=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/ZyCromerZ/Clang/releases |tr ',' '\n' | grep -E '("name":.*Clang.+.tar.gz"|"created_at":.+)' | sed -E -n '/"name":.+/{n;p}' | head -n 1 | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}')
          llvm_latest_relase_date=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/llvm/llvm-project/releases |tr ',' '\n' | grep -E '("name":.+Linux-X64.tar.xz"|"created_at":.+)' | sed -E -n '/"name":.+/{n;p}' | head -n 1 | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}')
          [ -z "$clang22_latest_release_date" ] && { echo "Failed to extract clang22 latest release date";exit 1;false; }
          [ -z "$llvm_latest_relase_date" ] && { echo "Failed to extract llvm latest release date";exit 1;false; }
          if [[ $clang22_latest_release_date > $llvm_latest_relase_date ]];then
            clang22_compiler=true
            latest_update_time=$clang22_latest_release_date
          else
            llvm_compiler=true
            latest_update_time=$llvm_latest_relase_date
          fi
          echo "Latest release of $( [ "$clang22_compiler" == "true" ] && echo "clang-22" || echo "llvm"): ${latest_update_time}"
          clang_cache_creation_time=$(gh cache list --repo $repo -k clang-${{ runner.os }}-v2 --json  'createdAt' 2>/dev/null  | grep 'createdAt' | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}') || true
          if [ -n "${clang_cache_creation_time}" ];then
            echo "clang-${{ runner.os }}-v1 creation date: ${clang_cache_creation_time}"
            if [[ $latest_update_time > $clang_cache_creation_time ]];then
              echo "removing old clang-${{ runner.os }}-v1 from cache ..."
              gh cache delete clang-${{ runner.os }}-v1 --repo $repo
            fi
          else
            echo "clang-${{ runner.os }}-v1 cache not found in ${repo}"
          fi
          

          

          



          
